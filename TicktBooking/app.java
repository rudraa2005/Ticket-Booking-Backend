/*
 * This source file was generated by the Gradle 'init' task
 */
package org.TicketBooking;
import org.TicketBooking.entities.Train;
import org.TicketBooking.entities.Ticket;
import org.TicketBooking.entities.User;
import org.TicketBooking.services.UserBookingService;
import org.TicketBooking.util.UserServiceUtil;

import java.io.IOException;
import java.sql.Time;
import java.util.*;

public class App {

    public static void main(String[] args) throws IOException {
        Ticket ticket = new Ticket();
        System.out.println("Running Train Booking System");
        Scanner sc = new Scanner(System.in);
        int option = 0;
        UserBookingService userBookingService;
        try{
            userBookingService = new UserBookingService();

        } catch (IOException e) {
            System.err.println("Error opening user booking service:");
            e.printStackTrace();
            return;
        }
        Train trainSelectedForBooking= null;
        while(option != 7){
            System.out.print("Choose an option: ");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit");
            option = sc.nextInt();

            switch (option){
                case 1:
                    System.out.println("Enter the Username: ");
                    String username = sc.next();
                    System.out.println("Enter New Password: ");
                    String password = sc.next();
                    User usertoSignUp = new User(username,password, UserServiceUtil.hashPassword(password),new ArrayList<>(), UUID.randomUUID().toString());
                    userBookingService.signUp(usertoSignUp);
                    break;

                case 2:
                    System.out.println("Enter Username: ");
                    String nametoLogin = sc.next();
                    System.out.println("Enter Password: ");
                    String passwordtoLogin = sc.next();

                    User loginUser = new User(nametoLogin,passwordtoLogin,null, new ArrayList<>(),null);
                    userBookingService.setCurrentUser(loginUser);

                    if(userBookingService.loginUser()){
                        System.out.println("Login Successful");
                    } else{
                        System.out.println("Login Failed");
                    }
                    break;

                case 3:
                    System.out.println("Fetching Bookings...");
                    userBookingService.fetchBooking();
                    break;
                case 4:
                    System.out.println("Type your Source Station: ");
                    String sourceStation = sc.next();
                    ticket.setSource( sourceStation);
                    System.out.println("Type your Destination Station: ");
                    String destinationStation = sc.next();
                    ticket.setDestination( destinationStation);
                    List<Train> trains= userBookingService.getTrains(sourceStation,destinationStation);
                    int index = 1;
                    for (Train train:trains){
                        System.out.println(train.getTrainInfo());
                        for (Map.Entry<String, Time> entry: train.getStationsTimes().entrySet()){
                            System.out.println("Station:"+ " " + entry.getKey() +  "Time:" + " " +entry.getValue());
                        }
                    }
                    System.out.println("Select your train by typing 1,2,3...");
                    int trainChoice = sc.nextInt();
                    if (trainChoice >= 1 && trainChoice <= trains.size()) {
                        trainSelectedForBooking = trains.get(trainChoice - 1);
                    } else {
                        System.out.println("Invalid train choice.");
                    }

                    break;
                case 5:
                    if (trainSelectedForBooking == null) {
                        System.out.println("You haven't selected a train yet. Please search trains first (Option 4).");
                        break;
                    }
                    System.out.println("Select a seat: ");
                    List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);

                    for  (List<Integer> row:seats){
                        for(Integer val:row){
                            System.out.print(val+ "");
                        }
                        System.out.println();
                    }
                    System.out.println("Select your seat by typing the row and column ");
                    System.out.println("Enter the row:");
                    int row = sc.nextInt();
                    System.out.println("Enter the column:");
                    int column = sc.nextInt();
                    System.out.println("Booking...");
                    Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking,row,column);
                    if(booked){
                        System.out.println("Train has been booked");
                    } else{
                        System.out.println("Train has NOT been booked");
                    }
                    break;

                case 6:
                    System.out.println("Enter Train ID: ");
                    String trainID = sc.next();
                    userBookingService.cancelBooking(trainID);
                    System.out.println("Train has been cancelled");
                    break;
            }
        }
    }
}
